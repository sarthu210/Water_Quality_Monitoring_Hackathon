{"version":3,"file":"OTLPProtoExporterBrowserBase.js","sourceRoot":"","sources":["../../../../src/platform/browser/OTLPProtoExporterBrowserBase.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,EACL,uBAAuB,IAAI,oBAAoB,EAC/C,iBAAiB,EAEjB,WAAW,GACZ,MAAM,mCAAmC,CAAC;AAC3C,OAAO,KAAK,IAAI,MAAM,sBAAsB,CAAC;AAQ7C;;GAEG;AACH,MAAM,OAAgB,4BAGpB,SAAQ,oBAAgD;IACxD,YAAY,SAAiC,EAAE;QAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;IAChB,CAAC;IAEO,sBAAsB,CAC5B,UAA6B;QAE7B,IAAI,UAAU,KAAK,iBAAiB,CAAC,KAAK,EAAE;YAC1C,2BAA2B;YAC3B,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,yBAAyE,CAAC;SAC9H;aAAM;YACL,2BAA2B;YAC3B,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,2BAA2E,CAAC;SAClI;IACH,CAAC;IAEQ,IAAI,CACX,OAAqB,EACrB,SAAqB,EACrB,OAA2C;QAE3C,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAC5D,OAAO;SACR;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7C,MAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CACnD,IAAI,CAAC,oBAAoB,EAAE,CAC5B,CAAC;QACF,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAEzD,IAAI,OAAO,EAAE;YACX,MAAM,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;YACxD,IAAI,IAAI,EAAE;gBACR,WAAW,CACT,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,wBAAwB,EAAE,CAAC,EACpD,IAAI,CAAC,GAAG,kCAEH,IAAI,CAAC,QAAQ,KAChB,cAAc,EAAE,wBAAwB,EACxC,MAAM,EAAE,wBAAwB,KAElC,IAAI,CAAC,aAAa,EAClB,SAAS,EACT,OAAO,CACR,CAAC;aACH;SACF;aAAM;YACL,OAAO,CAAC,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;SAC5C;IACH,CAAC;CAGF","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { ServiceClientType } from '../types';\nimport {\n  OTLPExporterBrowserBase as OTLPExporterBaseMain,\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  sendWithXhr,\n} from '@opentelemetry/otlp-exporter-base';\nimport * as root from '../../generated/root';\n\ninterface ExportRequestType<T, R = T & { toJSON: () => unknown }> {\n  create(properties?: T): R;\n  encode(message: T, writer?: protobuf.Writer): protobuf.Writer;\n  decode(reader: protobuf.Reader | Uint8Array, length?: number): R;\n}\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPProtoExporterBrowserBase<\n  ExportItem,\n  ServiceRequest\n> extends OTLPExporterBaseMain<ExportItem, ServiceRequest> {\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n  }\n\n  private _getExportRequestProto(\n    clientType: ServiceClientType\n  ): ExportRequestType<ServiceRequest> {\n    if (clientType === ServiceClientType.SPANS) {\n      // eslint-disable-next-line\n      return root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n    } else {\n      // eslint-disable-next-line\n      return root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n    }\n  }\n\n  override send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n\n    const serviceRequest = this.convert(objects);\n    const exportRequestType = this._getExportRequestProto(\n      this.getServiceClientType()\n    );\n    const message = exportRequestType.create(serviceRequest);\n\n    if (message) {\n      const body = exportRequestType.encode(message).finish();\n      if (body) {\n        sendWithXhr(\n          new Blob([body], { type: 'application/x-protobuf' }),\n          this.url,\n          {\n            ...this._headers,\n            'Content-Type': 'application/x-protobuf',\n            Accept: 'application/x-protobuf',\n          },\n          this.timeoutMillis,\n          onSuccess,\n          onError\n        );\n      }\n    } else {\n      onError(new OTLPExporterError('No proto'));\n    }\n  }\n\n  abstract getServiceClientType(): ServiceClientType;\n}\n"]}