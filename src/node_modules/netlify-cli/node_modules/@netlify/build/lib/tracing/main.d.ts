import type { TracingOptions } from '../core/types.js';
/** Starts the tracing SDK, if there's already a tracing service this will be a no-op */
export declare const startTracing: (options: TracingOptions, logger: (...args: any[]) => void) => import("@opentelemetry/api").Context | undefined;
/** Stops the tracing service if there's one running. This will flush any ongoing events */
export declare const stopTracing: () => Promise<void>;
/** Sets attributes to be propagated across child spans under the current context */
export declare const setMultiSpanAttributes: (attributes: {
    [key: string]: string;
}) => import("@opentelemetry/api").Context;
/** Add error information to the current active span (if any) */
export declare const addErrorToActiveSpan: (error: Error) => void;
/** Attributes used for the root span of our execution */
export type RootExecutionAttributes = {
    'build.id': string;
    'site.id': string;
    'deploy.id': string;
    'deploy.context': string;
};
/** Attributes used for the execution of each build step  */
export type StepExecutionAttributes = {
    'build.execution.step.name': string;
    'build.execution.step.package_name': string;
    'build.execution.step.package_path': string;
    'build.execution.step.build_dir': string;
    'build.execution.step.id': string;
    'build.execution.step.loaded_from': string;
    'build.execution.step.origin': string;
    'build.execution.step.event': string;
};
