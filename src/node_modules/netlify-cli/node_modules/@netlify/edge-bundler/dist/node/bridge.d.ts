/// <reference types="node" />
import { ExecaChildProcess } from 'execa';
import { Logger } from './logger.js';
declare const DENO_VERSION_RANGE = "^1.32.5";
type OnBeforeDownloadHook = () => void | Promise<void>;
type OnAfterDownloadHook = (error?: Error) => void | Promise<void>;
interface DenoOptions {
    cacheDirectory?: string;
    debug?: boolean;
    denoDir?: string;
    logger?: Logger;
    onAfterDownload?: OnAfterDownloadHook;
    onBeforeDownload?: OnBeforeDownloadHook;
    useGlobal?: boolean;
    versionRange?: string;
}
interface ProcessRef {
    ps?: ExecaChildProcess<string>;
}
interface RunOptions {
    pipeOutput?: boolean;
    env?: NodeJS.ProcessEnv;
    extendEnv?: boolean;
    rejectOnExitCode?: boolean;
}
declare class DenoBridge {
    cacheDirectory: string;
    currentDownload?: ReturnType<DenoBridge['downloadBinary']>;
    debug: boolean;
    denoDir?: string;
    logger: Logger;
    onAfterDownload?: OnAfterDownloadHook;
    onBeforeDownload?: OnBeforeDownloadHook;
    useGlobal: boolean;
    versionRange: string;
    constructor(options: DenoOptions);
    private downloadBinary;
    private getBinaryVersion;
    private getCachedBinary;
    private getGlobalBinary;
    private getRemoteBinary;
    private static runWithBinary;
    private writeVersionFile;
    ensureCacheDirectory(): Promise<void>;
    getBinaryPath(): Promise<{
        global: boolean;
        path: string;
    }>;
    getEnvironmentVariables(inputEnv?: NodeJS.ProcessEnv): NodeJS.ProcessEnv;
    run(args: string[], { pipeOutput, env: inputEnv, extendEnv, rejectOnExitCode }?: RunOptions): Promise<import("execa").ExecaReturnValue<string>>;
    runInBackground(args: string[], ref?: ProcessRef, { pipeOutput, env: inputEnv, extendEnv }?: RunOptions): Promise<void>;
}
export { DENO_VERSION_RANGE, DenoBridge };
export type { DenoOptions, OnAfterDownloadHook, OnBeforeDownloadHook, ProcessRef };
